version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: backend:latest
    build:
      context: ./backend/migrations
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    environment:
      AUTH_SERVICE_GRPC_PORT: 50051
      ESSAY_SERVICE_GRPC_PORT: 50052
      REVIEW_SERVICE_GRPC_PORT: 50053
    depends_on:
      auth-service:
        condition: service_started
      essay-service:
        condition: service_started
      review-service:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8080:8080"

  auth-service:
    build:
      context: ./backend
      dockerfile: auth-service/Dockerfile
    environment:
      AUTH_SERVICE_GRPC_PORT: 50051
    env_file: .env # JWT and postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  essay-service:
    build:
      context: ./backend
      dockerfile: essay-service/Dockerfile
    environment:
      ESSAY_SERVICE_GRPC_PORT: 50052
      REVIEW_SERVICE_GRPC_PORT: 50053
    env_file: .env # postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
      review-service:
        condition: service_started
    networks:
      - app-network

  review-service:
    build:
      context: ./backend
      dockerfile: review-service/Dockerfile
    environment:
      REVIEW_SERVICE_GRPC_PORT: 50053
    env_file: .env # postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
