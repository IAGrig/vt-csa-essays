version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: backend:latest
    build:
      context: ./backend/migrations
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    environment:
      AUTH_SERVICE_GRPC_PORT: 50051
      ESSAY_SERVICE_GRPC_PORT: 50052
      REVIEW_SERVICE_GRPC_PORT: 50053
      NOTIFICATIONS_SERVICE_GRPC_PORT: 50054
      MONITORING_PORT: 9090
    env_file: .env # JWT secrets
    depends_on:
      auth-service:
        condition: service_started
      essay-service:
        condition: service_started
      review-service:
        condition: service_started
      notification-service:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8080:8080"

  auth-service:
    build:
      context: ./backend
      dockerfile: auth-service/Dockerfile
    environment:
      AUTH_SERVICE_GRPC_PORT: 50051
      MONITORING_PORT: 9090
    env_file: .env # JWT and postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  essay-service:
    build:
      context: ./backend
      dockerfile: essay-service/Dockerfile
    environment:
      ESSAY_SERVICE_GRPC_PORT: 50052
      REVIEW_SERVICE_GRPC_PORT: 50053
      MONITORING_PORT: 9090
    env_file: .env # postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
      review-service:
        condition: service_started
    networks:
      - app-network

  review-service:
    build:
      context: ./backend
      dockerfile: review-service/Dockerfile
    environment:
      REVIEW_SERVICE_GRPC_PORT: 50053
      KAFKA_BROKERS: kafka:9092
      MONITORING_PORT: 9090
    env_file: .env # postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build:
      context: ./backend
      dockerfile: notification-service/Dockerfile
    environment:
      NOTIFICATIONS_SERVICE_GRPC_PORT: 50054
      KAFKA_BROKERS: kafka:9092
      MONITORING_PORT: 9090
    env_file: .env # postgres secrets
    depends_on:
      migrations:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test:
      - "CMD-SHELL"
      - "kafka-topics --bootstrap-server kafka:9092 --list | grep -q 'notifications' || kafka-topics --bootstrap-server kafka:9092 --create --topic notifications --partitions 1 --replication-factor 1"
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "9092:9092"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
    - "3000:3000"
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
    - ./monitoring/grafana:/etc/grafana/provisioning
    - grafana_data:/var/lib/grafana
    depends_on:
    - prometheus
    - loki
    networks:
    - app-network

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - app-network

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./monitoring/loki/promtail-config.yml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - app-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  app-network:
