// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: essay/essay.proto

package essay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EssayService_Add_FullMethodName                = "/essay.EssayService/Add"
	EssayService_GetAllEssays_FullMethodName       = "/essay.EssayService/GetAllEssays"
	EssayService_GetByAuthorName_FullMethodName    = "/essay.EssayService/GetByAuthorName"
	EssayService_RemoveByAuthorName_FullMethodName = "/essay.EssayService/RemoveByAuthorName"
	EssayService_SearchByContent_FullMethodName    = "/essay.EssayService/SearchByContent"
)

// EssayServiceClient is the client API for EssayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EssayServiceClient interface {
	Add(ctx context.Context, in *EssayAddRequest, opts ...grpc.CallOption) (*EssayResponse, error)
	GetAllEssays(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EssayResponse], error)
	GetByAuthorName(ctx context.Context, in *GetByAuthorNameRequest, opts ...grpc.CallOption) (*EssayWithReviewsResponse, error)
	RemoveByAuthorName(ctx context.Context, in *RemoveByAuthorNameRequest, opts ...grpc.CallOption) (*EssayResponse, error)
	SearchByContent(ctx context.Context, in *SearchByContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EssayResponse], error)
}

type essayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEssayServiceClient(cc grpc.ClientConnInterface) EssayServiceClient {
	return &essayServiceClient{cc}
}

func (c *essayServiceClient) Add(ctx context.Context, in *EssayAddRequest, opts ...grpc.CallOption) (*EssayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EssayResponse)
	err := c.cc.Invoke(ctx, EssayService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essayServiceClient) GetAllEssays(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EssayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EssayService_ServiceDesc.Streams[0], EssayService_GetAllEssays_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, EssayResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EssayService_GetAllEssaysClient = grpc.ServerStreamingClient[EssayResponse]

func (c *essayServiceClient) GetByAuthorName(ctx context.Context, in *GetByAuthorNameRequest, opts ...grpc.CallOption) (*EssayWithReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EssayWithReviewsResponse)
	err := c.cc.Invoke(ctx, EssayService_GetByAuthorName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essayServiceClient) RemoveByAuthorName(ctx context.Context, in *RemoveByAuthorNameRequest, opts ...grpc.CallOption) (*EssayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EssayResponse)
	err := c.cc.Invoke(ctx, EssayService_RemoveByAuthorName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essayServiceClient) SearchByContent(ctx context.Context, in *SearchByContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EssayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EssayService_ServiceDesc.Streams[1], EssayService_SearchByContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchByContentRequest, EssayResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EssayService_SearchByContentClient = grpc.ServerStreamingClient[EssayResponse]

// EssayServiceServer is the server API for EssayService service.
// All implementations must embed UnimplementedEssayServiceServer
// for forward compatibility.
type EssayServiceServer interface {
	Add(context.Context, *EssayAddRequest) (*EssayResponse, error)
	GetAllEssays(*EmptyRequest, grpc.ServerStreamingServer[EssayResponse]) error
	GetByAuthorName(context.Context, *GetByAuthorNameRequest) (*EssayWithReviewsResponse, error)
	RemoveByAuthorName(context.Context, *RemoveByAuthorNameRequest) (*EssayResponse, error)
	SearchByContent(*SearchByContentRequest, grpc.ServerStreamingServer[EssayResponse]) error
	mustEmbedUnimplementedEssayServiceServer()
}

// UnimplementedEssayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEssayServiceServer struct{}

func (UnimplementedEssayServiceServer) Add(context.Context, *EssayAddRequest) (*EssayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEssayServiceServer) GetAllEssays(*EmptyRequest, grpc.ServerStreamingServer[EssayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllEssays not implemented")
}
func (UnimplementedEssayServiceServer) GetByAuthorName(context.Context, *GetByAuthorNameRequest) (*EssayWithReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthorName not implemented")
}
func (UnimplementedEssayServiceServer) RemoveByAuthorName(context.Context, *RemoveByAuthorNameRequest) (*EssayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByAuthorName not implemented")
}
func (UnimplementedEssayServiceServer) SearchByContent(*SearchByContentRequest, grpc.ServerStreamingServer[EssayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchByContent not implemented")
}
func (UnimplementedEssayServiceServer) mustEmbedUnimplementedEssayServiceServer() {}
func (UnimplementedEssayServiceServer) testEmbeddedByValue()                      {}

// UnsafeEssayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EssayServiceServer will
// result in compilation errors.
type UnsafeEssayServiceServer interface {
	mustEmbedUnimplementedEssayServiceServer()
}

func RegisterEssayServiceServer(s grpc.ServiceRegistrar, srv EssayServiceServer) {
	// If the following call pancis, it indicates UnimplementedEssayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EssayService_ServiceDesc, srv)
}

func _EssayService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EssayAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssayServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EssayService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssayServiceServer).Add(ctx, req.(*EssayAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssayService_GetAllEssays_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EssayServiceServer).GetAllEssays(m, &grpc.GenericServerStream[EmptyRequest, EssayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EssayService_GetAllEssaysServer = grpc.ServerStreamingServer[EssayResponse]

func _EssayService_GetByAuthorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssayServiceServer).GetByAuthorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EssayService_GetByAuthorName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssayServiceServer).GetByAuthorName(ctx, req.(*GetByAuthorNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssayService_RemoveByAuthorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveByAuthorNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssayServiceServer).RemoveByAuthorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EssayService_RemoveByAuthorName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssayServiceServer).RemoveByAuthorName(ctx, req.(*RemoveByAuthorNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssayService_SearchByContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchByContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EssayServiceServer).SearchByContent(m, &grpc.GenericServerStream[SearchByContentRequest, EssayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EssayService_SearchByContentServer = grpc.ServerStreamingServer[EssayResponse]

// EssayService_ServiceDesc is the grpc.ServiceDesc for EssayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EssayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "essay.EssayService",
	HandlerType: (*EssayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _EssayService_Add_Handler,
		},
		{
			MethodName: "GetByAuthorName",
			Handler:    _EssayService_GetByAuthorName_Handler,
		},
		{
			MethodName: "RemoveByAuthorName",
			Handler:    _EssayService_RemoveByAuthorName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllEssays",
			Handler:       _EssayService_GetAllEssays_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchByContent",
			Handler:       _EssayService_SearchByContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "essay/essay.proto",
}
